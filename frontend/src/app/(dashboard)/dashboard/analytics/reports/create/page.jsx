'use client';

import React, { useState } from 'react';
import { Card } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import Link from 'next/link';

export default function CreateReportPage() {
  // State for form data
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    type: 'sales',
    dataSources: [],
    metrics: [],
    dimensions: [],
    filters: [],
    visualizations: [],
    schedule: {
      enabled: false,
      frequency: 'weekly',
      day: 'monday',
      time: '08:00',
      recipients: []
    },
    exportFormat: 'pdf'
  });
  
  // State for form validation
  const [errors, setErrors] = useState({});
  
  // State for active step
  const [activeStep, setActiveStep] = useState(1);
  
  // State for preview mode
  const [previewMode, setPreviewMode] = useState(false);
  
  // Mock data for available data sources
  const availableDataSources = [
    { id: 'sales', name: 'Sales Data', description: 'Order and revenue data from all sales channels' },
    { id: 'customers', name: 'Customer Data', description: 'Customer profiles, segments, and behavior data' },
    { id: 'products', name: 'Product Data', description: 'Product catalog, inventory, and performance data' },
    { id: 'marketing', name: 'Marketing Data', description: 'Campaign performance and marketing channel data' },
    { id: 'inventory', name: 'Inventory Data', description: 'Stock levels, movements, and warehouse data' },
    { id: 'website', name: 'Website Analytics', description: 'Website traffic, behavior, and conversion data' }
  ];
  
  // Mock data for available metrics
  const availableMetrics = {
    sales: [
      { id: 'revenue', name: 'Revenue', description: 'Total revenue from sales' },
      { id: 'orders', name: 'Orders', description: 'Number of orders placed' },
      { id: 'aov', name: 'Average Order Value', description: 'Average value of orders' },
      { id: 'refunds', name: 'Refunds', description: 'Total value of refunds' }
    ],
    customers: [
      { id: 'new_customers', name: 'New Customers', description: 'Number of new customer registrations' },
      { id: 'active_customers', name: 'Active Customers', description: 'Number of customers who made a purchase' },
      { id: 'clv', name: 'Customer Lifetime Value', description: 'Average revenue generated by a customer' },
      { id: 'churn_rate', name: 'Churn Rate', description: 'Rate at which customers stop doing business' }
    ],
    products: [
      { id: 'units_sold', name: 'Units Sold', description: 'Number of product units sold' },
      { id: 'product_revenue', name: 'Product Revenue', description: 'Revenue generated by products' },
      { id: 'profit_margin', name: 'Profit Margin', description: 'Profit margin percentage' },
      { id: 'stock_turnover', name: 'Stock Turnover', description: 'Rate at which inventory is sold' }
    ]
  };
  
  // Mock data for available dimensions
  const availableDimensions = {
    sales: [
      { id: 'date', name: 'Date', description: 'Time period (day, week, month, year)' },
      { id: 'product', name: 'Product', description: 'Product or product category' },
      { id: 'channel', name: 'Sales Channel', description: 'Online store, marketplace, POS, etc.' },
      { id: 'location', name: 'Location', description: 'Country, region, or city' }
    ],
    customers: [
      { id: 'segment', name: 'Customer Segment', description: 'Customer grouping based on attributes' },
      { id: 'acquisition', name: 'Acquisition Source', description: 'How the customer was acquired' },
      { id: 'date', name: 'Date', description: 'Time period (day, week, month, year)' },
      { id: 'location', name: 'Location', description: 'Country, region, or city' }
    ],
    products: [
      { id: 'category', name: 'Product Category', description: 'Category or type of product' },
      { id: 'brand', name: 'Brand', description: 'Product brand' },
      { id: 'supplier', name: 'Supplier', description: 'Product supplier or manufacturer' },
      { id: 'warehouse', name: 'Warehouse', description: 'Storage location' }
    ]
  };
  
  // Mock data for available visualizations
  const availableVisualizations = [
    { id: 'bar', name: 'Bar Chart', description: 'Compare values across categories' },
    { id: 'line', name: 'Line Chart', description: 'Show trends over time' },
    { id: 'pie', name: 'Pie Chart', description: 'Show proportion of a whole' },
    { id: 'table', name: 'Table', description: 'Display data in rows and columns' },
    { id: 'kpi', name: 'KPI Cards', description: 'Display key performance indicators' },
    { id: 'map', name: 'Geographic Map', description: 'Visualize data by geographic region' }
  ];
  
  // Handle form input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
    
    // Clear error for this field if it exists
    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: ''
      });
    }
  };
  
  // Handle data source selection
  const handleDataSourceSelect = (sourceId) => {
    const isSelected = formData.dataSources.includes(sourceId);
    
    if (isSelected) {
      // Remove from selected sources
      setFormData({
        ...formData,
        dataSources: formData.dataSources.filter(id => id !== sourceId),
        // Clear metrics and dimensions if their source is removed
        metrics: formData.metrics.filter(metric => {
          const [source] = metric.split('.');
          return source !== sourceId;
        }),
        dimensions: formData.dimensions.filter(dimension => {
          const [source] = dimension.split('.');
          return source !== sourceId;
        })
      });
    } else {
      // Add to selected sources
      setFormData({
        ...formData,
        dataSources: [...formData.dataSources, sourceId]
      });
    }
  };
  
  // Handle metric selection
  const handleMetricSelect = (sourceId, metricId) => {
    const metricKey = `${sourceId}.${metricId}`;
    const isSelected = formData.metrics.includes(metricKey);
    
    if (isSelected) {
      // Remove from selected metrics
      setFormData({
        ...formData,
        metrics: formData.metrics.filter(id => id !== metricKey)
      });
    } else {
      // Add to selected metrics
      setFormData({
        ...formData,
        metrics: [...formData.metrics, metricKey]
      });
    }
  };
  
  // Handle dimension selection
  const handleDimensionSelect = (sourceId, dimensionId) => {
    const dimensionKey = `${sourceId}.${dimensionId}`;
    const isSelected = formData.dimensions.includes(dimensionKey);
    
    if (isSelected) {
      // Remove from selected dimensions
      setFormData({
        ...formData,
        dimensions: formData.dimensions.filter(id => id !== dimensionKey)
      });
    } else {
      // Add to selected dimensions
      setFormData({
        ...formData,
        dimensions: [...formData.dimensions, dimensionKey]
      });
    }
  };
  
  // Handle visualization selection
  const handleVisualizationSelect = (visualizationId) => {
    const isSelected = formData.visualizations.includes(visualizationId);
    
    if (isSelected) {
      // Remove from selected visualizations
      setFormData({
        ...formData,
        visualizations: formData.visualizations.filter(id => id !== visualizationId)
      });
    } else {
      // Add to selected visualizations
      setFormData({
        ...formData,
        visualizations: [...formData.visualizations, visualizationId]
      });
    }
  };
  
  // Handle schedule toggle
  const handleScheduleToggle = (e) => {
    setFormData({
      ...formData,
      schedule: {
        ...formData.schedule,
        enabled: e.target.checked
      }
    });
  };
  
  // Handle schedule input changes
  const handleScheduleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      schedule: {
        ...formData.schedule,
        [name]: value
      }
    });
  };
  
  // Handle recipient addition
  const handleAddRecipient = (email) => {
    if (email && !formData.schedule.recipients.includes(email)) {
      setFormData({
        ...formData,
        schedule: {
          ...formData.schedule,
          recipients: [...formData.schedule.recipients, email]
        }
      });
    }
  };
  
  // Handle recipient removal
  const handleRemoveRecipient = (email) => {
    setFormData({
      ...formData,
      schedule: {
        ...formData.schedule,
        recipients: formData.schedule.recipients.filter(r => r !== email)
      }
    });
  };
  
  // Validate form data for the current step
  const validateStep = (step) => {
    const newErrors = {};
    
    if (step === 1) {
      if (!formData.name.trim()) {
        newErrors.name = 'Report name is required';
      }
      if (!formData.description.trim()) {
        newErrors.description = 'Report description is required';
      }
      if (!formData.type) {
        newErrors.type = 'Report type is required';
      }
    } else if (step === 2) {
      if (formData.dataSources.length === 0) {
        newErrors.dataSources = 'At least one data source must be selected';
      }
    } else if (step === 3) {
      if (formData.metrics.length === 0) {
        newErrors.metrics = 'At least one metric must be selected';
      }
      if (formData.dimensions.length === 0) {
        newErrors.dimensions = 'At least one dimension must be selected';
      }
    } else if (step === 4) {
      if (formData.visualizations.length === 0) {
        newErrors.visualizations = 'At least one visualization must be selected';
      }
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  // Handle next step
  const handleNextStep = () => {
    if (validateStep(activeStep)) {
      setActiveStep(activeStep + 1);
    }
  };
  
  // Handle previous step
  const handlePrevStep = () => {
    setActiveStep(activeStep - 1);
  };
  
  // Handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (validateStep(activeStep)) {
      // In a real application, this would make an API call to save the report
      console.log('Report data:', formData);
      
      // Redirect to the reports page or show a success message
      alert('Report created successfully!');
      // window.location.href = '/dashboard/analytics/reports';
    }
  };
  
  // Toggle preview mode
  const togglePreview = () => {
    setPreviewMode(!previewMode);
  };
  
  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0">
        <div>
          <h1 className="text-2xl font-bold">Create Custom Report</h1>
          <p className="text-gray-500 mt-1">Define your custom analytics report</p>
        </div>
        <div className="flex items-center space-x-3">
          <Link href="/dashboard/analytics/reports" passHref>
            <Button variant="outline">
              Cancel
            </Button>
          </Link>
          <Button onClick={togglePreview}>
            {previewMode ? 'Edit Report' : 'Preview Report'}
          </Button>
        </div>
      </div>
      
      {/* Progress Steps */}
      <div className="flex items-center justify-between">
        {[1, 2, 3, 4, 5].map((step) => (
          <div key={step} className="flex items-center">
            <div 
              className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${activeStep >= step ? 'border-blue-600 bg-blue-600 text-white' : 'border-gray-300 text-gray-500'}`}
            >
              {step}
            </div>
            <div className={`hidden sm:block ml-2 ${activeStep >= step ? 'text-blue-600' : 'text-gray-500'}`}>
              {step === 1 && 'Basic Info'}
              {step === 2 && 'Data Sources'}
              {step === 3 && 'Metrics & Dimensions'}
              {step === 4 && 'Visualizations'}
              {step === 5 && 'Schedule & Export'}
            </div>
            {step < 5 && (
              <div className="flex-1 h-0.5 mx-4 bg-gray-300">
                {/* Connector line */}
              </div>
            )}
          </div>
        ))}
      </div>
      
      {/* Form Content */}
      <Card className="p-6">
        {!previewMode ? (
          <form onSubmit={handleSubmit}>
            {/* Step 1: Basic Information */}
            {activeStep === 1 && (
              <div className="space-y-6">
                <h2 className="text-xl font-medium text-gray-900">Basic Information</h2>
                <div className="grid grid-cols-1 gap-6">
                  <div>
                    <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
                      Report Name *
                    </label>
                    <input
                      type="text"
                      id="name"
                      name="name"
                      className={`mt-1 block w-full rounded-md shadow-sm sm:text-sm ${errors.name ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'}`}
                      value={formData.name}
                      onChange={handleInputChange}
                      placeholder="e.g., Monthly Sales Performance"
                    />
                    {errors.name && <p className="mt-1 text-sm text-red-600">{errors.name}</p>}
                  </div>
                  
                  <div>
                    <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
                      Description *
                    </label>
                    <textarea
                      id="description"
                      name="description"
                      rows="3"
                      className={`mt-1 block w-full rounded-md shadow-sm sm:text-sm ${errors.description ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'}`}
                      value={formData.description}
                      onChange={handleInputChange}
                      placeholder="Provide a brief description of what this report will show"
                    />
                    {errors.description && <p className="mt-1 text-sm text-red-600">{errors.description}</p>}
                  </div>
                  
                  <div>
                    <label htmlFor="type" className="block text-sm font-medium text-gray-700 mb-1">
                      Report Type *
                    </label>
                    <select
                      id="type"
                      name="type"
                      className={`mt-1 block w-full rounded-md shadow-sm sm:text-sm ${errors.type ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'}`}
                      value={formData.type}
                      onChange={handleInputChange}
                    >
                      <option value="sales">Sales Report</option>
                      <option value="customers">Customer Report</option>
                      <option value="products">Product Report</option>
                      <option value="inventory">Inventory Report</option>
                      <option value="marketing">Marketing Report</option>
                      <option value="custom">Custom Report</option>
                    </select>
                    {errors.type && <p className="mt-1 text-sm text-red-600">{errors.type}</p>}
                  </div>
                </div>
              </div>
            )}
            
            {/* Step 2: Data Sources */}
            {activeStep === 2 && (
              <div className="space-y-6">
                <h2 className="text-xl font-medium text-gray-900">Data Sources</h2>
                <p className="text-gray-500">Select the data sources to include in your report</p>
                
                {errors.dataSources && <p className="mt-1 text-sm text-red-600">{errors.dataSources}</p>}
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {availableDataSources.map((source) => (
                    <div 
                      key={source.id} 
                      className={`border rounded-lg p-4 cursor-pointer transition-colors ${formData.dataSources.includes(source.id) ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-blue-300'}`}
                      onClick={() => handleDataSourceSelect(source.id)}
                    >
                      <div className="flex items-start">
                        <input
                          type="checkbox"
                          className="h-5 w-5 text-blue-600 rounded mt-0.5"
                          checked={formData.dataSources.includes(source.id)}
                          onChange={() => {}} // Handled by the div click
                          onClick={(e) => e.stopPropagation()}
                        />
                        <div className="ml-3">
                          <h3 className="text-md font-medium text-gray-900">{source.name}</h3>
                          <p className="text-sm text-gray-500">{source.description}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            {/* Step 3: Metrics & Dimensions */}
            {activeStep === 3 && (
              <div className="space-y-6">
                <h2 className="text-xl font-medium text-gray-900">Metrics & Dimensions</h2>
                <p className="text-gray-500">Select the metrics and dimensions to include in your report</p>
                
                {(errors.metrics || errors.dimensions) && (
                  <div className="space-y-1">
                    {errors.metrics && <p className="text-sm text-red-600">{errors.metrics}</p>}
                    {errors.dimensions && <p className="text-sm text-red-600">{errors.dimensions}</p>}
                  </div>
                )}
                
                {formData.dataSources.length === 0 ? (
                  <div className="text-center py-6">
                    <p className="text-gray-500">Please select at least one data source in the previous step</p>
                    <Button 
                      variant="outline" 
                      className="mt-4"
                      onClick={() => setActiveStep(2)}
                    >
                      Go Back to Data Sources
                    </Button>
                  </div>
                ) : (
                  <div className="space-y-8">
                    {/* Metrics */}
                    <div>
                      <h3 className="text-lg font-medium text-gray-900 mb-4">Metrics</h3>
                      <div className="space-y-6">
                        {formData.dataSources.map((sourceId) => {
                          const source = availableDataSources.find(s => s.id === sourceId);
                          const metrics = availableMetrics[sourceId] || [];
                          
                          return (
                            <div key={sourceId} className="space-y-3">
                              <h4 className="text-md font-medium text-gray-900">{source?.name}</h4>
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                {metrics.map((metric) => (
                                  <div 
                                    key={metric.id} 
                                    className={`border rounded-lg p-3 cursor-pointer transition-colors ${formData.metrics.includes(`${sourceId}.${metric.id}`) ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-blue-300'}`}
                                    onClick={() => handleMetricSelect(sourceId, metric.id)}
                                  >
                                    <div className="flex items-start">
                                      <input
                                        type="checkbox"
                                        className="h-4 w-4 text-blue-600 rounded mt-0.5"
                                        checked={formData.metrics.includes(`${sourceId}.${metric.id}`)}
                                        onChange={() => {}} // Handled by the div click
                                        onClick={(e) => e.stopPropagation()}
                                      />
                                      <div className="ml-3">
                                        <h5 className="text-sm font-medium text-gray-900">{metric.name}</h5>
                                        <p className="text-xs text-gray-500">{metric.description}</p>
                                      </div>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                    
                    {/* Dimensions */}
                    <div>
                      <h3 className="text-lg font-medium text-gray-900 mb-4">Dimensions</h3>
                      <div className="space-y-6">
                        {formData.dataSources.map((sourceId) => {
                          const source = availableDataSources.find(s => s.id === sourceId);
                          const dimensions = availableDimensions[sourceId] || [];
                          
                          return (
                            <div key={sourceId} className="space-y-3">
                              <h4 className="text-md font-medium text-gray-900">{source?.name}</h4>
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                {dimensions.map((dimension) => (
                                  <div 
                                    key={dimension.id} 
                                    className={`border rounded-lg p-3 cursor-pointer transition-colors ${formData.dimensions.includes(`${sourceId}.${dimension.id}`) ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-blue-300'}`}
                                    onClick={() => handleDimensionSelect(sourceId, dimension.id)}
                                  >
                                    <div className="flex items-start">
                                      <input
                                        type="checkbox"
                                        className="h-4 w-4 text-blue-600 rounded mt-0.5"
                                        checked={formData.dimensions.includes(`${sourceId}.${dimension.id}`)}
                                        onChange={() => {}} // Handled by the div click
                                        onClick={(e) => e.stopPropagation()}
                                      />
                                      <div className="ml-3">
                                        <h5 className="text-sm font-medium text-gray-900">{dimension.name}</h5>
                                        <p className="text-xs text-gray-500">{dimension.description}</p>
                                      </div>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}
            
            {/* Step 4: Visualizations */}
            {activeStep === 4 && (
              <div className="space-y-6">
                <h2 className="text-xl font-medium text-gray-900">Visualizations</h2>
                <p className="text-gray-500">Select the visualizations to include in your report</p>
                
                {errors.visualizations && <p className="mt-1 text-sm text-red-600">{errors.visualizations}</p>}
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {availableVisualizations.map((viz) => (
                    <div 
                      key={viz.id} 
                      className={`border rounded-lg p-4 cursor-pointer transition-colors ${formData.visualizations.includes(viz.id) ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-blue-300'}`}
                      onClick={() => handleVisualizationSelect(viz.id)}
                    >
                      <div className="flex items-start">
                        <input
                          type="checkbox"
                          className="h-5 w-5 text-blue-600 rounded mt-0.5"
                          checked={formData.visualizations.includes(viz.id)}
                          onChange={() => {}} // Handled by the div click
                          onClick={(e) => e.stopPropagation()}
                        />
                        <div className="ml-3">
                          <h3 className="text-md font-medium text-gray-900">{viz.name}</h3>
                          <p className="text-sm text-gray-500">{viz.description}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            {/* Step 5: Schedule & Export */}
            {activeStep === 5 && (
              <div className="space-y-6">
                <h2 className="text-xl font-medium text-gray-900">Schedule & Export</h2>
                <p className="text-gray-500">Configure report scheduling and export options</p>
                
                <div className="space-y-6">
                  {/* Schedule */}
                  <div className="space-y-4">
                    <div className="flex items-center">
                      <input
                        type="checkbox"
                        id="scheduleEnabled"
                        className="h-5 w-5 text-blue-600 rounded"
                        checked={formData.schedule.enabled}
                        onChange={handleScheduleToggle}
                      />
                      <label htmlFor="scheduleEnabled" className="ml-2 block text-md font-medium text-gray-900">
                        Schedule this report
                      </label>
                    </div>
                    
                    {formData.schedule.enabled && (
                      <div className="pl-7 space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label htmlFor="frequency" className="block text-sm font-medium text-gray-700 mb-1">
                              Frequency
                            </label>
                            <select
                              id="frequency"
                              name="frequency"
                              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                              value={formData.schedule.frequency}
                              onChange={handleScheduleChange}
                            >
                              <option value="daily">Daily</option>
                              <option value="weekly">Weekly</option>
                              <option value="monthly">Monthly</option>
                              <option value="quarterly">Quarterly</option>
                            </select>
                          </div>
                          
                          {formData.schedule.frequency === 'weekly' && (
                            <div>
                              <label htmlFor="day" className="block text-sm font-medium text-gray-700 mb-1">
                                Day of Week
                              </label>
                              <select
                                id="day"
                                name="day"
                                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                                value={formData.schedule.day}
                                onChange={handleScheduleChange}
                              >
                                <option value="monday">Monday</option>
                                <option value="tuesday">Tuesday</option>
                                <option value="wednesday">Wednesday</option>
                                <option value="thursday">Thursday</option>
                                <option value="friday">Friday</option>
                                <option value="saturday">Saturday</option>
                                <option value="sunday">Sunday</option>
                              </select>
                            </div>
                          )}
                          
                          {formData.schedule.frequency === 'monthly' && (
                            <div>
                              <label htmlFor="day" className="block text-sm font-medium text-gray-700 mb-1">
                                Day of Month
                              </label>
                              <select
                                id="day"
                                name="day"
                                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                                value={formData.schedule.day}
                                onChange={handleScheduleChange}
                              >
                                {[...Array(31)].map((_, i) => (
                                  <option key={i + 1} value={i + 1}>{i + 1}</option>
                                ))}
                              </select>
                            </div>
                          )}
                          
                          <div>
                            <label htmlFor="time" className="block text-sm font-medium text-gray-700 mb-1">
                              Time
                            </label>
                            <input
                              type="time"
                              id="time"
                              name="time"
                              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                              value={formData.schedule.time}
                              onChange={handleScheduleChange}
                            />
                          </div>
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Recipients
                          </label>
                          <div className="flex flex-wrap gap-2 mb-2">
                            {formData.schedule.recipients.map((email) => (
                              <div key={email} className="bg-blue-100 text-blue-800 rounded-full px-3 py-1 text-sm flex items-center">
                                <span>{email}</span>
                                <button
                                  type="button"
                                  className="ml-2 text-blue-600 hover:text-blue-800"
                                  onClick={() => handleRemoveRecipient(email)}
                                >
                                  &times;
                                </button>
                              </div>
                            ))}
                          </div>
                          <div className="flex">
                            <input
                              type="email"
                              id="recipient"
                              className="mt-1 block w-full rounded-l-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                              placeholder="Enter email address"
                            />
                            <button
                              type="button"
                              className="mt-1 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-r-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                              onClick={() => handleAddRecipient(document.getElementById('recipient').value)}
                            >
                              Add
                            </button>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                  
                  {/* Export Format */}
                  <div>
                    <label htmlFor="exportFormat" className="block text-md font-medium text-gray-900 mb-2">
                      Export Format
                    </label>
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                      <div 
                        className={`border rounded-lg p-4 cursor-pointer transition-colors ${formData.exportFormat === 'pdf' ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-blue-300'}`}
                        onClick={() => setFormData({...formData, exportFormat: 'pdf'})}
                      >
                        <div className="flex items-center">
                          <input
                            type="radio"
                            id="pdf"
                            name="exportFormat"
                            className="h-4 w-4 text-blue-600"
                            checked={formData.exportFormat === 'pdf'}
                            onChange={() => {}}
                            onClick={(e) => e.stopPropagation()}
                          />
                          <label htmlFor="pdf" className="ml-2 block text-sm font-medium text-gray-900">
                            PDF
                          </label>
                        </div>
                      </div>
                      
                      <div 
                        className={`border rounded-lg p-4 cursor-pointer transition-colors ${formData.exportFormat === 'excel' ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-blue-300'}`}
                        onClick={() => setFormData({...formData, exportFormat: 'excel'})}
                      >
                        <div className="flex items-center">
                          <input
                            type="radio"
                            id="excel"
                            name="exportFormat"
                            className="h-4 w-4 text-blue-600"
                            checked={formData.exportFormat === 'excel'}
                            onChange={() => {}}
                            onClick={(e) => e.stopPropagation()}
                          />
                          <label htmlFor="excel" className="ml-2 block text-sm font-medium text-gray-900">
                            Excel
                          </label>
                        </div>
                      </div>
                      
                      <div 
                        className={`border rounded-lg p-4 cursor-pointer transition-colors ${formData.exportFormat === 'csv' ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-blue-300'}`}
                        onClick={() => setFormData({...formData, exportFormat: 'csv'})}
                      >
                        <div className="flex items-center">
                          <input
                            type="radio"
                            id="csv"
                            name="exportFormat"
                            className="h-4 w-4 text-blue-600"
                            checked={formData.exportFormat === 'csv'}
                            onChange={() => {}}
                            onClick={(e) => e.stopPropagation()}
                          />
                          <label htmlFor="csv" className="ml-2 block text-sm font-medium text-gray-900">
                            CSV
                          </label>
                        </div>
                      </div>
                      
                      <div 
                        className={`border rounded-lg p-4 cursor-pointer transition-colors ${formData.exportFormat === 'json' ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-blue-300'}`}
                        onClick={() => setFormData({...formData, exportFormat: 'json'})}
                      >
                        <div className="flex items-center">
                          <input
                            type="radio"
                            id="json"
                            name="exportFormat"
                            className="h-4 w-4 text-blue-600"
                            checked={formData.exportFormat === 'json'}
                            onChange={() => {}}
                            onClick={(e) => e.stopPropagation()}
                          />
                          <label htmlFor="json" className="ml-2 block text-sm font-medium text-gray-900">
                            JSON
                          </label>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            
            {/* Navigation Buttons */}
            <div className="mt-8 flex justify-between">
              {activeStep > 1 ? (
                <Button 
                  type="button" 
                  variant="outline"
                  onClick={handlePrevStep}
                >
                  Previous
                </Button>
              ) : (
                <div></div> // Empty div to maintain flex spacing
              )}
              
              {activeStep < 5 ? (
                <Button 
                  type="button"
                  onClick={handleNextStep}
                >
                  Next
                </Button>
              ) : (
                <Button type="submit">
                  Create Report
                </Button>
              )}
            </div>
          </form>
        ) : (
          /* Preview Mode */
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-xl font-medium text-gray-900">Report Preview</h2>
              <Button variant="outline" onClick={togglePreview}>
                Back to Edit
              </Button>
            </div>
            
            <div className="border rounded-lg p-6 space-y-6">
              <div>
                <h3 className="text-lg font-medium text-gray-900">{formData.name || 'Untitled Report'}</h3>
                <p className="text-gray-500 mt-1">{formData.description || 'No description provided'}</p>
                <div className="mt-2">
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    {formData.type.charAt(0).toUpperCase() + formData.type.slice(1)} Report
                  </span>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="text-md font-medium text-gray-900 mb-2">Data Sources</h4>
                  <ul className="list-disc list-inside text-gray-600 space-y-1">
                    {formData.dataSources.length > 0 ? (
                      formData.dataSources.map((sourceId) => {
                        const source = availableDataSources.find(s => s.id === sourceId);
                        return source ? (
                          <li key={sourceId}>{source.name}</li>
                        ) : null;
                      })
                    ) : (
                      <li className="text-gray-400">No data sources selected</li>
                    )}
                  </ul>
                </div>
                
                <div>
                  <h4 className="text-md font-medium text-gray-900 mb-2">Visualizations</h4>
                  <ul className="list-disc list-inside text-gray-600 space-y-1">
                    {formData.visualizations.length > 0 ? (
                      formData.visualizations.map((vizId) => {
                        const viz = availableVisualizations.find(v => v.id === vizId);
                        return viz ? (
                          <li key={vizId}>{viz.name}</li>
                        ) : null;
                      })
                    ) : (
                      <li className="text-gray-400">No visualizations selected</li>
                    )}
                  </ul>
                </div>
              </div>
              
               <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="text-md font-medium text-gray-900 mb-2">Metrics</h4>
                  <ul className="list-disc list-inside text-gray-600 space-y-1">
                    {formData.metrics.length > 0 ? (
                      formData.metrics.map((metricKey) => {
                        const [sourceId, metricId] = metricKey.split('.');
                        const source = availableDataSources.find(s => s.id === sourceId);
                        const metric = availableMetrics[sourceId]?.find(m => m.id === metricId);
                        return source && metric ? (
                          <li key={metricKey}>{metric.name} ({source.name})</li>
                        ) : null;
                      })
                    ) : (
                      <li className="text-gray-400">No metrics selected</li>
                    )}
                  </ul>
                </div> 
                
                <div>
                  <h4 className="text-md font-medium text-gray-900 mb-2">Dimensions</h4>
                  <ul className="list-disc list-inside text-gray-600 space-y-1">
                    {formData.dimensions.length > 0 ? (
                      formData.dimensions.map((dimensionKey) => {
                        const [sourceId, dimensionId] = dimensionKey.split('.');
                        const source = availableDataSources.find(s => s.id === sourceId);
                        const dimension = availableDimensions[sourceId]?.find(d => d.id === dimensionId);
                        return source && dimension ? (
                          <li key={dimensionKey}>{dimension.name} ({source.name})</li>
                        ) : null;
                      })
                    ) : (
                      <li className="text-gray-400">No dimensions selected</li>
                    )}
                  </ul>
                </div>
              </div>
              
              <div>
                <h4 className="text-md font-medium text-gray-900 mb-2">Schedule</h4>
                {formData.schedule.enabled ? (
                  <div className="text-gray-600">
                    <p>Frequency: {formData.schedule.frequency.charAt(0).toUpperCase() + formData.schedule.frequency.slice(1)}</p>
                    {formData.schedule.frequency === 'weekly' && (
                      <p>Day: {formData.schedule.day.charAt(0).toUpperCase() + formData.schedule.day.slice(1)}</p>
                    )}
                    {formData.schedule.frequency === 'monthly' && (
                      <p>Day: {formData.schedule.day}</p>
                    )}
                    <p>Time: {formData.schedule.time}</p>
                    <p>Recipients: {formData.schedule.recipients.length > 0 ? formData.schedule.recipients.join(', ') : 'None'}</p>
                  </div>
                ) : (
                  <p className="text-gray-400">No schedule configured</p>
                )}
              </div>
              
              <div>
                <h4 className="text-md font-medium text-gray-900 mb-2">Export Format</h4>
                <p className="text-gray-600">{formData.exportFormat.toUpperCase()}</p>
              </div>
              
              {/* Sample Visualization */}
              <div className="border-t pt-6">
                <h4 className="text-md font-medium text-gray-900 mb-4">Sample Visualization</h4>
                <div className="bg-gray-100 rounded-lg p-6 flex items-center justify-center h-64">
                  <p className="text-gray-500 text-center">
                    Visualizations will appear here when the report is generated.<br />
                    This is just a preview of how your report might look.
                  </p>
                </div>
              </div>
            </div>
            
            <div className="flex justify-end space-x-3">
              <Button variant="outline" onClick={togglePreview}>
                Back to Edit
              </Button>
              <Button onClick={handleSubmit}>
                Create Report
              </Button>
            </div>
          </div>
        )}
      </Card>
    </div>
  );
}